CREATE TABLE superstore (
    item_id INTEGER PRIMARY KEY,
    item_name TEXT,
    category TEXT,
    price DECIMAL(10, 2),
    stock_quantity INTEGER,
    average_rating DECIMAL(3, 2)
);

INSERT INTO superstore (item_id, item_name, category, price, stock_quantity, average_rating)
VALUES
    (1, 'Stainless Steel Cookware Set', 'Kitchen Supplies', 89.99, 50, 4.6),
    (2, 'Memory Foam Mattress', 'Furnishings', 499.99, 30, 4.8),
    (3, 'Smart LED TV', 'Electronics', 549.00, 20, 4.5),
    (4, 'Robot Vacuum Cleaner', 'Appliances', 199.50, 40, 4.3),
    (5, 'Wireless Bluetooth Speaker', 'Electronics', 39.99, 60, 4.2),
    (6, 'Non-Stick Baking Set', 'Kitchen Supplies', 29.95, 80, 4.4),
    (7, 'Cotton Bedding Set', 'Furnishings', 89.00, 25, 4.7),
    (8, 'Smart Home Security Camera', 'Electronics', 79.95, 15, 4.1),
    (9, 'Air Purifier', 'Appliances', 129.50, 35, 4.6),
    (10, 'Premium Coffee Maker', 'Kitchen Supplies', 79.99, 50, 4.9),
    (11, 'Ergonomic Office Chair', 'Furnishings', 189.00, 20, 4.5),
    (12, 'Wireless Earbuds', 'Electronics', 49.99, 75, 4.3),
    (13, 'Slow Cooker', 'Appliances', 49.95, 30, 4.7),
    (14, 'Cutlery Set', 'Kitchen Supplies', 34.50, 40, 4.4),
    (15, 'Cozy Throw Blanket', 'Furnishings', 24.99, 100, 4.2);

-- For this project, I queired the Superstore database to gain insights on about items sold at 
   price at the store and their prices. 

-- Order items by price from largest to smallest
SELECT *
FROM superstore
ORDER BY price DESC
LIMIT 5;

-- How much money could the superstore make with it's current inventory?
SELECT SUM(price*stock_quantity) AS total_item_revenue
FROM superstore;

-- Find the average price of Kitchen supplies
SELECT AVG(price)
FROM superstore
WHERE category = 'Kitchen Supplies';

-- Find the total revenue of each category
SELECT category, (price*stock_quantity) AS total_item_revenue
FROM superstore
GROUP BY category
ORDER BY total_item_revenue DESC;

-- Which category has the highest average rating?
SELECT category, AVG(average_rating) AS avg_rating_by_category
FROM superstore
GROUP BY category
ORDER BY avg_rating_by_category DESC;

-- How much of each category is in stock?
SELECT category, SUM(stock_quantity) AS total_stock_by_category
FROM superstore
GROUP BY category
ORDER BY total_stock_by_category DESC
